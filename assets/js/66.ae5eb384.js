(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{293:function(t,e,_){"use strict";_.r(e);var s=_(0),r=Object(s.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/%E8%B4%AA%E5%BF%83%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科-贪心算法"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92",target:"_blank",rel:"noopener noreferrer"}},[t._v("维基百科-动态规划"),_("OutboundLink")],1)])]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),_("p",[t._v("如果你类别数学里面的求证(就是那个k=1成立，假设k=n-1成立，如果证明k=n成立的话，那么整个式子就成立的那种证明方式的话)。就会发现这两者有相同的地方。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),_("p",[t._v("贪心算法并不能让我们得到每个问题的最优解，只能是大部分情况的最优解。")]),t._v(" "),t._m(8),t._v(" "),_("p",[t._v("显然动态规划准确率更高一些。")]),t._v(" "),_("p",[t._v("如果可以接受贪心带来的准确率下降，贪心有着更高的速度。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),_("p",[t._v("最后得到最优解，这就是贪心算法的解法。")]),t._v(" "),_("p",[t._v("区别在于：")]),t._v(" "),t._m(18),t._v(" "),t._m(19)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"动态规划-贪心算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态规划-贪心算法","aria-hidden":"true"}},[this._v("#")]),this._v(" 动态规划&贪心算法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"两则解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两则解析","aria-hidden":"true"}},[this._v("#")]),this._v(" 两则解析")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("动态规划")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("把一个问题最小化，然后求解这个 "),e("strong",[this._v("最小化问题的最优解")]),this._v("。")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("所以可以得到动态规划的思路是：先得到"),_("code",[t._v("n=1")]),t._v("(这里的"),_("strong",[t._v("1")]),t._v("是该问题的最小单元)的最优解，然后根据"),_("code",[t._v("n=1")]),t._v("得到"),_("code",[t._v("n=2")]),t._v("，依次类推。最终得到想要求解问题的最优解。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("贪心算法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("和 "),e("strong",[this._v("动态规划")]),this._v("很容易混淆。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("贪心法，又称贪心算法、贪婪算法、或称贪婪法，是一种在每一步选择中都采取在"),e("strong",[this._v("当前状态下")]),this._v("最好或最优（即最有利）的选择，从而希望"),e("strong",[this._v("导致结果是最好或最优")]),this._v("的算法。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"两者优劣势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两者优劣势","aria-hidden":"true"}},[this._v("#")]),this._v(" 两者优劣势")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"两者区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两者区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 两者区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从思路上来说，动态规划想要解决一个问题，必须先将问题最小化(简化为最小的原子，例如"),e("code",[this._v("n=1")]),this._v("),然后以这样的链路形式"),e("code",[this._v("n=1->n=2->...n=n")]),this._v("的解决方式，下一步解决方案依赖与上一步。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当"),e("code",[this._v("n=i")]),this._v("获得结果不是最优解，可以回退到上一步，继续尝试最优解法。")]),this._v(" "),e("li",[e("strong",[this._v("子问题划分是最明显的特点")])])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("而 "),_("strong",[t._v("贪心算法")]),t._v("，并不会从"),_("code",[t._v("n=1")]),t._v("开始解决问题。想要解决"),_("code",[t._v("n=j")]),t._v("的问题，就是会从"),_("code",[t._v("n=j")]),t._v("入手。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是贪心算法最重要的要解决的问题是，当"),e("code",[this._v("n=j")]),this._v("的时候，"),e("strong",[this._v("最理想的情况是那种？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("例如求解最少硬币(以中国硬币金额为例)，6可以由"),e("code",[this._v("[5, 1] or [2, 2, 2] or [1, 1, 1, 1, 1, 1]")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("那么拿到最少硬币的问题直观的理想解法是："),e("strong",[this._v("尽量拿大面额的硬币，在大部分条件下是可以得到最优解")]),this._v("。对于上面这个问题的思路：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("假设最大面额是"),e("code",[this._v("5")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("对于12来说，先优先拿"),_("code",[t._v("5")]),t._v("，可以拿到两个，超过两个就没有办法得到"),_("code",[t._v("12")])]),t._v(" "),_("li",[t._v("然后现在最大面额是"),_("code",[t._v("2")]),t._v("，优先拿"),_("code",[t._v("2")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("贪心算法没有子问题")]),this._v(" "),e("li",[this._v("如果当前状态不是最优解，没有办法回退到上一步")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("贪心算法比较动态规划更好理解！")])])}],!1,null,null,null);e.default=r.exports}}]);