(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{232:function(t,a,s){"use strict";s.r(a);var r=s(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"%E5%9F%BA%E7%A1%80"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#%E5%9F%BA%E7%A1%80","aria-hidden":"true"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("blockquote",[s("p",[t._v("数据结构方面基础部分(结合JS)")])]),t._v(" "),s("h2",{attrs:{id:"%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---javascript%E7%89%B9%E7%82%B9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---javascript%E7%89%B9%E7%82%B9","aria-hidden":"true"}},[t._v("#")]),t._v(" 前置知识 - JavaScript特点")]),t._v(" "),s("p",[t._v("由于"),s("code",[t._v("Array")]),t._v("的存在，使得其实现数据结构都比较容易。包括自带的"),s("code",[t._v("pop() shift() unshift() push()")]),t._v("等函数都易于数据结构操作。")]),t._v(" "),s("h2",{attrs:{id:"%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9","aria-hidden":"true"}},[t._v("#")]),t._v(" 前置知识 - 数据结构特点")]),t._v(" "),s("p",[t._v("数据结构一般有以下函数：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("isEmpty()")])]),t._v(" "),s("li",[s("code",[t._v("length")])]),t._v(" "),s("li",[t._v("相关数据结构等操作，如何加入，如何删除")]),t._v(" "),s("li",[t._v("如何输出等")])]),t._v(" "),s("p",[t._v("但是可以发现一个问题，如果是复杂的数据结构，"),s("strong",[t._v("例如链表，完全可以模拟堆栈队列的方式。")])]),t._v(" "),s("p",[t._v("但是数据结构存在的意义就是使用合适的数据结构实现，"),s("strong",[t._v("重点在于数据结构的思想而不是数据结构的名字。")])]),t._v(" "),s("h2",{attrs:{id:"%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---javascript%E9%9A%90%E8%97%8F%E6%95%B0%E6%8D%AE"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---javascript%E9%9A%90%E8%97%8F%E6%95%B0%E6%8D%AE","aria-hidden":"true"}},[t._v("#")]),t._v(" 前置知识 - JavaScript隐藏数据")]),t._v(" "),s("p",[t._v("往往"),s("code",[t._v("function")]),t._v("构造对象。好处就是如果"),s("code",[t._v("function")]),t._v("可以隐藏数据。例如：")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stack")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'good'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ananme "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stack'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("是无法通过"),s("code",[t._v("this.name")]),t._v("得到数据的。这是"),s("code",[t._v("function")]),t._v("的优点。")]),t._v(" "),s("h2",{attrs:{id:"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%80%9F%E5%86%99"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%80%9F%E5%86%99","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构速写")]),t._v(" "),s("p",[t._v("数据结构各个种类特性速写。")]),t._v(" "),s("ul",[s("li",[t._v("栈(Stack) - "),s("strong",[t._v("FILO")]),t._v("，最早进入的最后出来")]),t._v(" "),s("li",[t._v("队列(Quene) - "),s("strong",[t._v("FIFO")]),t._v("，先进先出\n"),s("ul",[s("li",[t._v("循环队列 - 实现循环的概念就是从头出来然后又从尾巴进来")])])]),t._v(" "),s("li",[t._v("链表(LinkedList) -")])])])}],!1,null,null,null);a.default=v.exports}}]);