(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{229:function(t,e,r){"use strict";r.r(e);var s=r(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("能够经常接触到的树结构基本上就是指的"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树"),r("OutboundLink")],1),t._v("。当然还有其他种类，基本知识这里不介绍了(因为自己了解一点，写自己已经知道的，并不是阅读笔记的目的）")]),t._v(" "),r("p",[t._v("关于二叉树你需要知道一些方法：")]),t._v(" "),t._m(4),t._v(" "),r("p",[t._v("以及一些二叉树变种：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树"),r("OutboundLink")],1),t._v(" - 左边子节点比根节点小，右边的比根节点大")])]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),r("p",[t._v("书中还有一些小细节：")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/JiangWeixian/JS-Books/blob/master/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91/binarySearchTree.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("binarysearchtree.js"),r("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"%E6%A0%91"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E6%A0%91","aria-hidden":"true"}},[this._v("#")]),this._v(" 树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("tree")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("a",{attrs:{href:"#%E6%A0%91"}},[t._v("树")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E6%A0%91%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88"}},[t._v("前置知识 - 树，你需要知道什么")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E9%80%92%E5%BD%92"}},[t._v("前置知识 - 递归")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"}},[t._v("二叉搜索树")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0"}},[t._v("内置函数")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%AE%9E%E7%8E%B0"}},[t._v("实现")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E6%A0%91%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E6%A0%91%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88","aria-hidden":"true"}},[this._v("#")]),this._v(" 前置知识 - 树，你需要知道什么")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("深度优先遍历 - 就是前序列遍历")]),t._v(" "),r("li",[t._v("广度优先遍历 - 借助队列，先进先出。先获取根节点进入队列。\n"),r("ol",[r("li",[t._v("弹出队列第一个元素，设置当前指针为这个元素")]),t._v(" "),r("li",[t._v("以此获取弹出元素左右子树，进入队列。")]),t._v(" "),r("li",[t._v("直到队列没有元素")])])]),t._v(" "),r("li",[t._v("前中后三种遍历方式 - 取决于"),r("strong",[t._v("递归")]),t._v("和"),r("strong",[t._v("打印阶段")]),t._v("函数语句相对位置位置"),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 来自维基百科伪代码")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    print node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" then "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    print node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 中")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" then "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    print node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后")]),t._v("\n")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E9%80%92%E5%BD%92"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86---%E9%80%92%E5%BD%92","aria-hidden":"true"}},[this._v("#")]),this._v(" 前置知识 - 递归")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("递归特点：")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("调用自身")]),t._v(" "),r("li",[t._v("含有边界点 - 就是在"),r("strong",[t._v("边界点分支")]),t._v("中"),r("strong",[t._v("不调用")]),t._v("自身。在边界点外调用自身实现递归")]),t._v(" "),r("li",[t._v("拥有多个流程的时候就会使用递归，递归就是返回流程的起点")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("实现自己的递归")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("返回上一步。如果"),e("strong",[this._v("想要获取递归的返回值，要在每个调用递归的地方"),e("code",[this._v("return")])]),this._v("。例如边界点分支的返回结果，由上一步递归调用。这一步递归返回的结果，由上一步递归调用。")]),this._v(" "),e("li",[this._v("一般都有返回结果，如果没有，就是在"),e("strong",[this._v("分界点分支将任务做完")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91","aria-hidden":"true"}},[this._v("#")]),this._v(" 二叉搜索树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0","aria-hidden":"true"}},[this._v("#")]),this._v(" 内置函数")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("insert - 由于二叉"),r("strong",[t._v("搜索树")]),t._v("的特殊性。**越往下层的节点"),r("code",[t._v("value")]),t._v("是越来越小的(且左边比根节点小，右边比根节点大)**因此当插入一个元素之后。"),r("strong",[t._v("如果比当前的根节点小，就要递归继续往下(至于是左边还是右边需要自己决定)")])]),t._v(" "),r("li",[t._v("search - 只要返回真假节课代表是否找到，"),r("strong",[t._v("同样也是递归(因为不像是链表只有一个方向)")]),t._v("，需要分别找左边子树和右边子树")]),t._v(" "),r("li",[t._v("inOrderTraverse - 以下三种是遍历方式。书中"),r("strong",[t._v("接受一个回调函数作为参数是我觉得最妙的！")]),t._v("。也就是上面的"),r("code",[t._v("print node.value 变为 callback(node.value)")])]),t._v(" "),r("li",[t._v("preOrderTraverse")]),t._v(" "),r("li",[t._v("postOrderTraverse")]),t._v(" "),r("li",[t._v("min - 最最左边(含有左边子节点的最下面一层)。"),r("strong",[t._v("注意这个二叉搜索树的特性，想要找到最小的，就找最左边的节点就可以了")])]),t._v(" "),r("li",[t._v("max - 最最右边")]),t._v(" "),r("li",[t._v("remove - 分析的情况比较多，并不是直接将删除的那个节点设置为"),r("code",[t._v("null")]),t._v(" "),r("ul",[r("li",[t._v("如果删除节点"),r("strong",[t._v("下面没有子节点")]),t._v("就是直接设置"),r("code",[t._v("null")])]),t._v(" "),r("li",[t._v("如果"),r("strong",[t._v("下面还有只有一个子节点")]),t._v("，需要将根节点链接下面的子节点")]),t._v(" "),r("li",[t._v("如果"),r("strong",[t._v("下面还有两个子节点")])]),t._v(" "),r("li",[r("strong",[t._v("不要怀疑这就是维基百科上的定义")])]),t._v(" "),r("li",[t._v("需要注意：还是"),r("code",[t._v("JavaScript")]),t._v("属性问题，只有修改属性才会修改树中节点(直接讲节点设置为"),r("code",[t._v("null")]),t._v("是不行的)，只有通过返回"),r("code",[t._v("null")]),t._v("，让上一步进行修改("),r("strong",[t._v("因此需要递归")]),t._v(")。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("删除含有两个子节点的节点示例")]),this._v(":")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/JiangWeixian/JS-Books/master/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%A0%91/img/%E5%88%A0%E9%99%A4%E4%B8%A4%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E8%8A%82%E7%82%B9.png",alt:"删除含有两个子节点的节点"}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("首先我们要删除的是"),r("strong",[t._v("15")]),t._v("，含有两个子节点(并不是说讲所有下面的元素都删掉)")]),t._v(" "),r("li",[t._v("而是在"),r("strong",[t._v("节点15")]),t._v("的右边找到最小的节点"),r("strong",[t._v("18")])]),t._v(" "),r("li",[t._v("删除"),r("strong",[t._v("18")]),t._v("，然后把"),r("strong",[t._v("节点15")]),t._v("里面的数据替换为节点"),r("strong",[t._v("18")]),t._v("，达到删除的目的")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果需要用到递归调用的函数，那么这个函数一定不是"),e("strong",[this._v("绑定在this上")])]),this._v(" "),e("li",[this._v("在树中，是否需要递归决定于是不是需要同时操作左右子树。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"%E5%AE%9E%E7%8E%B0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#%E5%AE%9E%E7%8E%B0","aria-hidden":"true"}},[this._v("#")]),this._v(" 实现")])}],!1,null,null,null);e.default=n.exports}}]);